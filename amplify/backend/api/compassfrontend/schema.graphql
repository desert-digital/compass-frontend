type PendingEvent @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID
  body: String
  start: String 
  end: String
  item: String
  item_id: String
  status: String
}

type Vessel @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID
  name: String
  type: String
  defaultWorkflow: WorkflowModel @hasOne
}

type Staff @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID
  name: String
  email: String
}

type ActionModel @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID
  name: String
  status: String
  notes: String 
  duration: Int
}

type Action @model @auth(rules: [{allow: private}]){
  id: ID!
  model: ActionModel @hasOne
  checklist: ChecklistModel @belongsTo
  actualStart: String
  actualEnd: String
}

type ChecklistModel @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID
  name: String
  steps: [Action] @hasMany
}

type Checklist @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID
  owner: Staff @hasOne
  model: ChecklistModel @hasOne
  start: AWSDate
  end: AWSDate 
}

type WorkflowModel @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  checklists: [Checklist] @hasMany
  actualStart: String
  actualEnd: String
}

type Workflow @model @auth(rules: [{ allow: private }]){
  id: ID!
  company: ID!
  owner: Staff @hasOne
  steps: WorkflowModel @hasOne
  start: AWSDate
  end: AWSDate 
}