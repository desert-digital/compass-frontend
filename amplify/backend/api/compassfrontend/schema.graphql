# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum CompassUserRole {
  Admin
  OpsManager,
  ServiceManager,
  Crew
}

enum ItemStatus {
  active
  inactive
}

enum ActionChecklistWorkflowStatus {
  blocked
  waiting
  in_progress
  completed
  cancelled
}

enum PendingEventStatus {
  pending
  completed
  cancelled
}Ã¥

type PendingEvent @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String
  status: PendingEventStatus
  start: String 
  end: String
  item: String
  item_id: String
  status: TaskStatus,
  contactEmail: String,
  contactName: String,
  contactPhone: String
}

type ServiceOrder @model @auth(rules: [{ allow: public}]){
  id: ID!
  company: String
  boat: Vessel @hasOne
  items: [String]
}

type InventoryItem @model @auth(rules: [{allow: public}]) {
  id: ID!
  location: String 
  description: String 
  leadTime: Int
  quantity: Int
}

type Vessel @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  status: ItemStatus
  name: String
  vesselType: String
  documentNumber: String
  owner: Owner @hasOne
  status: TaskStatus
  defaultWorkflow: WorkflowModel @hasOne
}

type Staff @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  status: ItemStatus
  name: String
  email: String
  phone: String
  status: TaskStatus
  username: String @index(name: "byUserName", queryField: "getStaffByUserName")
  role: CompassUserRole
}

type Owner @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  status: ItemStatus
  name: String
  email: String
  phone: String
  status: TaskStatus
  boats: [Vessel] @hasMany
}

type ActionModel @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  name: String
  notes: String 
  duration: Int
  checklists: [ChecklistModel] @manyToMany(relationName: "ChecklistActions")
}

type ChecklistModel @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  name: String
  notes: String
  duration: Int
  preCharter: Boolean
  actionModels: [ActionModel] @manyToMany(relationName: "ChecklistActions")
  workflows: [WorkflowModel] @manyToMany(relationName: "WorkflowChecklists") 
}

type WorkflowModel @model @auth(rules: [{allow: public}]) {
  id: ID!
  company: String!
  name: String
  notes: String
  duration: Int
  checklistModels: [ChecklistModel] @manyToMany(relationName: "WorkflowChecklists")
}

type Action @model @auth(rules: [{allow: public}]){
  id: ID!
  company: String
  status: ActionChecklistWorkflowStatus
  name: String
  duration: Int
  actualStart: String
  actualEnd: String
}

type Checklist @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  name: String
  duration: Int
  status: ActionChecklistWorkflowStatus
  owner: Staff @hasOne
  steps: [Action] @hasMany
  mustStart: String
  mustEnd: String 
  actualStart: String
  actualEnd: String 
}

type Workflow @model @auth(rules: [{ allow: public }]){
  id: ID!
  company: String!
  name: String
  duration: Int
  status: ActionChecklistWorkflowStatus
  steps: [Checklist] @hasMany
  mustStart: String
  mustEnd: String 
  actualStart: String
  actualEnd: String 
}

type Message @model @auth(rules: [{ allow: public }]){
  id: ID!
  toAddress: String! 
  fromAddress: String! 
  message: String!
  messageChecklist: Checklist @hasOne
}

type AppFlag @model @auth(rules: [{ allow: public }]){
  id: ID!
  flag: String!
  value: String!
}

type UserNameList {
  names: [String]
}

type Mutation {
  startWorkflow(workflowId: String!): String @function(name: "startworkflow-${env}")
}


